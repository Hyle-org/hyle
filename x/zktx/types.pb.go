// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyle/zktx/v1/types.proto

package zktx

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters of the module.
type Params struct {
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_75e1d84055f4b488, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// GenesisState is the state that must be provided at genesis.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params    Params               `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	Contracts map[string]*Contract `protobuf:"bytes,2,rep,name=contracts,proto3" json:"contracts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_75e1d84055f4b488, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetContracts() map[string]*Contract {
	if m != nil {
		return m.Contracts
	}
	return nil
}

// Contract is the state of a contract
type Contract struct {
	// The identifier of the verifier to run for this contract
	Verifier string `protobuf:"bytes,1,opt,name=verifier,proto3" json:"verifier,omitempty"`
	// An identifier for the program (may depend on verifier)
	ProgramId []byte `protobuf:"bytes,2,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	// Recap of the current contract state
	StateDigest []byte `protobuf:"bytes,3,opt,name=state_digest,json=stateDigest,proto3" json:"state_digest,omitempty"`
	// Hash of the next TX to settle, in order
	NextTxToSettle []byte `protobuf:"bytes,4,opt,name=next_tx_to_settle,json=nextTxToSettle,proto3" json:"next_tx_to_settle,omitempty"`
	// Latest tx received to settle, for optimisation
	LatestTxReceived []byte `protobuf:"bytes,5,opt,name=latest_tx_received,json=latestTxReceived,proto3" json:"latest_tx_received,omitempty"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_75e1d84055f4b488, []int{2}
}
func (m *Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(m, src)
}
func (m *Contract) XXX_Size() int {
	return m.Size()
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetVerifier() string {
	if m != nil {
		return m.Verifier
	}
	return ""
}

func (m *Contract) GetProgramId() []byte {
	if m != nil {
		return m.ProgramId
	}
	return nil
}

func (m *Contract) GetStateDigest() []byte {
	if m != nil {
		return m.StateDigest
	}
	return nil
}

func (m *Contract) GetNextTxToSettle() []byte {
	if m != nil {
		return m.NextTxToSettle
	}
	return nil
}

func (m *Contract) GetLatestTxReceived() []byte {
	if m != nil {
		return m.LatestTxReceived
	}
	return nil
}

// PayloadMetadata is the transient state we need to keep to settle payloads
type PayloadMetadata struct {
	// Hash of the payload
	PayloadsHash []byte `protobuf:"bytes,1,opt,name=payloads_hash,json=payloadsHash,proto3" json:"payloads_hash,omitempty"`
	// Identity of the caller
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// Contract name to settle
	ContractName string `protobuf:"bytes,3,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// The initial state of the contract
	InitialState []byte `protobuf:"bytes,4,opt,name=initial_state,json=initialState,proto3" json:"initial_state,omitempty"`
	// The next state to transition to
	NextState []byte `protobuf:"bytes,5,opt,name=next_state,json=nextState,proto3" json:"next_state,omitempty"`
	// If this payload was verified
	Verified bool `protobuf:"varint,6,opt,name=verified,proto3" json:"verified,omitempty"`
	// If this is a success or failure
	Success bool `protobuf:"varint,7,opt,name=success,proto3" json:"success,omitempty"`
	// Next TX hash in the list of TX to settle
	NextTxHash []byte `protobuf:"bytes,8,opt,name=next_tx_hash,json=nextTxHash,proto3" json:"next_tx_hash,omitempty"`
}

func (m *PayloadMetadata) Reset()         { *m = PayloadMetadata{} }
func (m *PayloadMetadata) String() string { return proto.CompactTextString(m) }
func (*PayloadMetadata) ProtoMessage()    {}
func (*PayloadMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_75e1d84055f4b488, []int{3}
}
func (m *PayloadMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayloadMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayloadMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayloadMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayloadMetadata.Merge(m, src)
}
func (m *PayloadMetadata) XXX_Size() int {
	return m.Size()
}
func (m *PayloadMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_PayloadMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_PayloadMetadata proto.InternalMessageInfo

func (m *PayloadMetadata) GetPayloadsHash() []byte {
	if m != nil {
		return m.PayloadsHash
	}
	return nil
}

func (m *PayloadMetadata) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *PayloadMetadata) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *PayloadMetadata) GetInitialState() []byte {
	if m != nil {
		return m.InitialState
	}
	return nil
}

func (m *PayloadMetadata) GetNextState() []byte {
	if m != nil {
		return m.NextState
	}
	return nil
}

func (m *PayloadMetadata) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *PayloadMetadata) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PayloadMetadata) GetNextTxHash() []byte {
	if m != nil {
		return m.NextTxHash
	}
	return nil
}

// TxTimeout is a list of TXs used to timeout
type TxTimeout struct {
	// List of transactions to timeout
	Txs [][]byte `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (m *TxTimeout) Reset()         { *m = TxTimeout{} }
func (m *TxTimeout) String() string { return proto.CompactTextString(m) }
func (*TxTimeout) ProtoMessage()    {}
func (*TxTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_75e1d84055f4b488, []int{4}
}
func (m *TxTimeout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxTimeout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxTimeout.Merge(m, src)
}
func (m *TxTimeout) XXX_Size() int {
	return m.Size()
}
func (m *TxTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_TxTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_TxTimeout proto.InternalMessageInfo

func (m *TxTimeout) GetTxs() [][]byte {
	if m != nil {
		return m.Txs
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "hyle.zktx.v1.Params")
	proto.RegisterType((*GenesisState)(nil), "hyle.zktx.v1.GenesisState")
	proto.RegisterMapType((map[string]*Contract)(nil), "hyle.zktx.v1.GenesisState.ContractsEntry")
	proto.RegisterType((*Contract)(nil), "hyle.zktx.v1.Contract")
	proto.RegisterType((*PayloadMetadata)(nil), "hyle.zktx.v1.PayloadMetadata")
	proto.RegisterType((*TxTimeout)(nil), "hyle.zktx.v1.TxTimeout")
}

func init() { proto.RegisterFile("hyle/zktx/v1/types.proto", fileDescriptor_75e1d84055f4b488) }

var fileDescriptor_75e1d84055f4b488 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x13, 0x9a, 0xc6, 0x5b, 0x53, 0xda, 0x55, 0x41, 0x56, 0xa4, 0xba, 0x21, 0x5c, 0xd2,
	0xaa, 0xd8, 0x6a, 0x39, 0x00, 0x3d, 0x16, 0x50, 0xe1, 0x00, 0xaa, 0x5c, 0x9f, 0xb8, 0x58, 0x5b,
	0x7b, 0x71, 0x56, 0xb5, 0xbd, 0x91, 0x77, 0x13, 0xd9, 0x7c, 0x02, 0x27, 0x24, 0x7e, 0x82, 0x63,
	0x7f, 0x81, 0x5b, 0x8f, 0x3d, 0x72, 0x42, 0xa8, 0x95, 0xe8, 0x6f, 0xa0, 0x9d, 0xb5, 0x93, 0xe6,
	0x62, 0xcd, 0xbc, 0xf7, 0x66, 0xc6, 0x6f, 0x34, 0x8b, 0xec, 0x71, 0x95, 0x52, 0xef, 0xeb, 0x85,
	0x2c, 0xbd, 0xd9, 0x81, 0x27, 0xab, 0x09, 0x15, 0xee, 0xa4, 0xe0, 0x92, 0x63, 0x4b, 0x31, 0xae,
	0x62, 0xdc, 0xd9, 0x41, 0x7f, 0x2b, 0xe1, 0x09, 0x07, 0xc2, 0x53, 0x91, 0xd6, 0xf4, 0x37, 0x49,
	0xc6, 0x72, 0xee, 0xc1, 0x57, 0x43, 0xc3, 0x1d, 0xd4, 0x3d, 0x25, 0x05, 0xc9, 0xc4, 0xd1, 0xe3,
	0x6f, 0x77, 0x97, 0x7b, 0x1b, 0x8b, 0xfe, 0x1a, 0x1e, 0xfe, 0x33, 0x90, 0x75, 0x42, 0x73, 0x2a,
	0x98, 0x38, 0x93, 0x44, 0x52, 0xfc, 0x12, 0x75, 0x27, 0x40, 0xd9, 0xc6, 0xc0, 0x18, 0xad, 0x1d,
	0x6e, 0xb9, 0xf7, 0x27, 0xbb, 0xba, 0xec, 0xd8, 0xbc, 0xfa, 0xb3, 0xd3, 0xfa, 0x79, 0x77, 0xb9,
	0x67, 0xf8, 0xb5, 0x1c, 0x9f, 0x20, 0x33, 0xe2, 0xb9, 0x2c, 0x48, 0x24, 0x85, 0xdd, 0x1e, 0x74,
	0x46, 0x6b, 0x87, 0xbb, 0xcb, 0xb5, 0xf7, 0xe7, 0xb8, 0x6f, 0x1a, 0xed, 0xbb, 0x5c, 0x16, 0x95,
	0xbf, 0xa8, 0xed, 0x07, 0x68, 0x7d, 0x99, 0xc4, 0x1b, 0xa8, 0x73, 0x41, 0x2b, 0xf8, 0x21, 0xd3,
	0x57, 0x21, 0xde, 0x47, 0x2b, 0x33, 0x92, 0x4e, 0xa9, 0xdd, 0x86, 0x9f, 0x7c, 0xb2, 0x3c, 0xa8,
	0x29, 0xf7, 0xb5, 0xe8, 0xa8, 0xfd, 0xca, 0x18, 0xfe, 0x32, 0x50, 0xaf, 0xc1, 0x71, 0x1f, 0xf5,
	0x66, 0xb4, 0x60, 0x5f, 0x18, 0x2d, 0xea, 0xae, 0xf3, 0x1c, 0x6f, 0x23, 0x34, 0x29, 0x78, 0x52,
	0x90, 0x2c, 0x64, 0x31, 0xf4, 0xb7, 0x7c, 0xb3, 0x46, 0x3e, 0xc4, 0xf8, 0x29, 0xb2, 0x84, 0x32,
	0x10, 0xc6, 0x2c, 0xa1, 0x42, 0xda, 0x1d, 0x10, 0xac, 0x01, 0xf6, 0x16, 0x20, 0xbc, 0x8b, 0x36,
	0x73, 0x5a, 0xca, 0x50, 0x96, 0xa1, 0xe4, 0xa1, 0xa0, 0x52, 0xa6, 0xd4, 0x7e, 0x00, 0xba, 0x75,
	0x45, 0x04, 0x65, 0xc0, 0xcf, 0x00, 0xc5, 0xfb, 0x08, 0xa7, 0x44, 0x52, 0x01, 0xe2, 0x82, 0x46,
	0x94, 0xcd, 0x68, 0x6c, 0xaf, 0x80, 0x76, 0x43, 0x33, 0x41, 0xe9, 0xd7, 0xf8, 0xf0, 0x47, 0x1b,
	0x3d, 0x3a, 0x25, 0x55, 0xca, 0x49, 0xfc, 0x91, 0x4a, 0x12, 0x13, 0x49, 0xf0, 0x33, 0xf4, 0x70,
	0xa2, 0x21, 0x11, 0x8e, 0x89, 0x18, 0x83, 0x1f, 0xcb, 0xb7, 0x1a, 0xf0, 0x3d, 0x11, 0x63, 0xe5,
	0x97, 0xc5, 0x34, 0x97, 0x4c, 0x56, 0xe0, 0xc8, 0xf4, 0xe7, 0xb9, 0x6a, 0xd0, 0xec, 0x3e, 0xcc,
	0x49, 0x46, 0xc1, 0x91, 0xe9, 0x5b, 0x0d, 0xf8, 0x89, 0x64, 0x54, 0x89, 0x58, 0xce, 0x24, 0x23,
	0x69, 0x08, 0x4e, 0x6b, 0x3b, 0x56, 0x0d, 0xea, 0xd3, 0xd9, 0x46, 0x08, 0x7c, 0x6b, 0x85, 0x36,
	0x61, 0x2a, 0x44, 0xd3, 0x8b, 0xa5, 0xc7, 0x76, 0x77, 0x60, 0x8c, 0x7a, 0xf3, 0xa5, 0xc7, 0xd8,
	0x46, 0xab, 0x62, 0x1a, 0x45, 0x54, 0x08, 0x7b, 0x15, 0xa8, 0x26, 0xc5, 0x03, 0x64, 0x35, 0xcb,
	0x04, 0x7b, 0x3d, 0x68, 0x8b, 0xf4, 0x1e, 0x95, 0xb9, 0xe1, 0x36, 0x32, 0x83, 0x32, 0x60, 0x19,
	0xe5, 0x53, 0xa9, 0x4e, 0x45, 0x96, 0xea, 0x76, 0x3b, 0x23, 0xcb, 0x57, 0xe1, 0xf1, 0xeb, 0xab,
	0x1b, 0xc7, 0xb8, 0xbe, 0x71, 0x8c, 0xbf, 0x37, 0x8e, 0xf1, 0xfd, 0xd6, 0x69, 0x5d, 0xdf, 0x3a,
	0xad, 0xdf, 0xb7, 0x4e, 0xeb, 0xf3, 0x4e, 0xc2, 0xe4, 0x78, 0x7a, 0xee, 0x46, 0x3c, 0xf3, 0xd4,
	0xfd, 0x3c, 0xe7, 0x45, 0x02, 0x81, 0x57, 0xc2, 0x1b, 0x39, 0xef, 0xc2, 0x23, 0x7a, 0xf1, 0x3f,
	0x00, 0x00, 0xff, 0xff, 0x81, 0x9f, 0x5d, 0x0b, 0x97, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contracts) > 0 {
		for k := range m.Contracts {
			v := m.Contracts[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LatestTxReceived) > 0 {
		i -= len(m.LatestTxReceived)
		copy(dAtA[i:], m.LatestTxReceived)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LatestTxReceived)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NextTxToSettle) > 0 {
		i -= len(m.NextTxToSettle)
		copy(dAtA[i:], m.NextTxToSettle)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NextTxToSettle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StateDigest) > 0 {
		i -= len(m.StateDigest)
		copy(dAtA[i:], m.StateDigest)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.StateDigest)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Verifier) > 0 {
		i -= len(m.Verifier)
		copy(dAtA[i:], m.Verifier)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Verifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayloadMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayloadMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayloadMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextTxHash) > 0 {
		i -= len(m.NextTxHash)
		copy(dAtA[i:], m.NextTxHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NextTxHash)))
		i--
		dAtA[i] = 0x42
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.NextState) > 0 {
		i -= len(m.NextState)
		copy(dAtA[i:], m.NextState)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NextState)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InitialState) > 0 {
		i -= len(m.InitialState)
		copy(dAtA[i:], m.InitialState)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InitialState)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PayloadsHash) > 0 {
		i -= len(m.PayloadsHash)
		copy(dAtA[i:], m.PayloadsHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PayloadsHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxTimeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxTimeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxTimeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Txs[iNdEx])
			copy(dAtA[i:], m.Txs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Txs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.Contracts) > 0 {
		for k, v := range m.Contracts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Verifier)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.StateDigest)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NextTxToSettle)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LatestTxReceived)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PayloadMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PayloadsHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InitialState)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NextState)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Verified {
		n += 2
	}
	if m.Success {
		n += 2
	}
	l = len(m.NextTxHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TxTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contracts == nil {
				m.Contracts = make(map[string]*Contract)
			}
			var mapkey string
			var mapvalue *Contract
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Contract{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Contracts[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = append(m.ProgramId[:0], dAtA[iNdEx:postIndex]...)
			if m.ProgramId == nil {
				m.ProgramId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateDigest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateDigest = append(m.StateDigest[:0], dAtA[iNdEx:postIndex]...)
			if m.StateDigest == nil {
				m.StateDigest = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTxToSettle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextTxToSettle = append(m.NextTxToSettle[:0], dAtA[iNdEx:postIndex]...)
			if m.NextTxToSettle == nil {
				m.NextTxToSettle = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestTxReceived", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestTxReceived = append(m.LatestTxReceived[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestTxReceived == nil {
				m.LatestTxReceived = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayloadMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayloadMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayloadMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadsHash = append(m.PayloadsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PayloadsHash == nil {
				m.PayloadsHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialState = append(m.InitialState[:0], dAtA[iNdEx:postIndex]...)
			if m.InitialState == nil {
				m.InitialState = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextState = append(m.NextState[:0], dAtA[iNdEx:postIndex]...)
			if m.NextState == nil {
				m.NextState = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextTxHash = append(m.NextTxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.NextTxHash == nil {
				m.NextTxHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxTimeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxTimeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxTimeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, make([]byte, postIndex-iNdEx))
			copy(m.Txs[len(m.Txs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
