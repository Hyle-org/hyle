syntax = "proto3";
package hyle.zktx.v1;

option go_package = "github.com/hyle-org/hyle/x/zktx";

import "cosmos/msg/v1/msg.proto";

// Msg defines the module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // execute a zk-proven state change
  rpc PublishPayloads(MsgPublishPayloads) returns (MsgPublishPayloadsResponse);

  // Verify a payload
  rpc PublishPayloadProof(MsgPublishPayloadProof)
      returns (MsgPublishPayloadProofResponse);

  // RegisterContract registers a contract
  rpc RegisterContract(MsgRegisterContract)
      returns (MsgRegisterContractResponse);
}

// Payload is a blob
message Payload {
  // Name of target contract
  string contract_name = 1;
  // Payload data
  bytes data = 2;
}

// execute a zk-proven state change - request type
message MsgPublishPayloads {
  // Identity is the identity of the TX sender
  string identity = 1;
  // list of payloads
  repeated Payload payloads = 2;
}

// No response
message MsgPublishPayloadsResponse {}

// Prove a previously published payload
message MsgPublishPayloadProof {
  // Tx hash of the payload to prove
  bytes tx_hash = 1;

  // Index of the payload in the tx
  uint32 payload_index = 2;

  // Contract name
  string contract_name = 3;

  // Proof of the payload
  bytes proof = 4;
}

// No response
message MsgPublishPayloadProofResponse {}

// Register a contract - request type
message MsgRegisterContract {
  // owner is the contract owner
  string owner = 1;

  // Identifier of the verifier
  string verifier = 2;

  // Identifier of the smart contract
  bytes program_id = 3;

  // Initial state digest
  bytes state_digest = 4;

  // Identifier of the contract name
  string contract_name = 5;
}

// Register a contract - response type
message MsgRegisterContractResponse {}
